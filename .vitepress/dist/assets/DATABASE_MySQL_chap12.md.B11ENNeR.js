import{_ as l,c as i,o as e,a1 as a}from"./chunks/framework.BzbwRryB.js";const n="/docs-lwg.github.io/assets/1.Dce28fk6.png",t="/docs-lwg.github.io/assets/2.BHQKCU_P.png",o="/docs-lwg.github.io/assets/3.ZI4qNWSs.png",r="/docs-lwg.github.io/assets/4.Cs1hNd5R.png",L=JSON.parse('{"title":"MySQL数据库表的空间回收","description":"","frontmatter":{},"headers":[],"relativePath":"DATABASE/MySQL/chap12.md","filePath":"DATABASE/MySQL/chap12.md"}'),p={name:"DATABASE/MySQL/chap12.md"},s=a('<h1 id="mysql数据库表的空间回收" tabindex="-1">MySQL数据库表的空间回收 <a class="header-anchor" href="#mysql数据库表的空间回收" aria-label="Permalink to &quot;MySQL数据库表的空间回收&quot;">​</a></h1><p>一个 InnoDB 表包含两部分，即：表结构定义和数据。在 MySQL 8.0 版本以前，表结构是存在以.frm 为后缀的文件里。而 MySQL 8.0 版本，则已经允许把表结构定义放在系统数据表中了。</p><h2 id="参数-innodb-file-per-table" tabindex="-1">参数 innodb_file_per_table <a class="header-anchor" href="#参数-innodb-file-per-table" aria-label="Permalink to &quot;参数 innodb_file_per_table&quot;">​</a></h2><p>表数据既可以存在共享表空间里，也可以是单独的文件。这个行为是由参数 innodb_file_per_table 控制的：</p><ul><li>这个参数设置为 OFF 表示的是，表的数据放在系统共享表空间，也就是跟数据字典放在一起；</li><li>这个参数设置为 ON 表示的是，每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中。</li></ul><p>建议将该参数设置为ON，原因是：一个表单独存储为一个文件更容易管理，而且在你不需要这个表的时候，通过 drop table 命令，系统就会直接删除这个文件。<strong>而如果是放在共享表空间中，即使表删掉了，空间也是不会回收的。</strong></p><h2 id="数据删除流程" tabindex="-1">数据删除流程 <a class="header-anchor" href="#数据删除流程" aria-label="Permalink to &quot;数据删除流程&quot;">​</a></h2><p>以下是一个索引的示意图：</p><p><img src="'+n+'" alt="image"></p><ul><li>当删除 R4 这个记录时，InnoDB 引擎只会把 R4 这个记录标记为删除。</li><li>如果之后要再插入一个 ID 在 300 和 600 之间的记录时，可能会复用这个位置。但是，<strong>磁盘文件的大小并不会缩小</strong>。</li><li>如果删除了一个数据页的数据，那么整个数据页都会标记为可复用。</li></ul><p><mark>注：数据页的复用跟记录的复用是不同的</mark></p><ul><li>记录的复用只限于符合范围条件的数据。比如R4 这条记录被删除后，如果插入一个 ID 是 400 的行，可以直接复用这个空间。但如果插入的是一个 ID 是 800 的行，就不能复用这个位置了。</li><li>当整个页从 B+ 树里面摘掉以后，可以复用到任何位置。</li><li>如果相邻的两个数据页利用率都很小，<strong>系统就会把这两个页上的数据合到其中一个页上，另外一个数据页就被标记为可复用。</strong></li></ul><p>因此，delete命令<mark>只是把记录的位置，或者数据页标记为了“可复用”，但磁盘文件的大小是不会变的，即无法回收表空间的。</mark>这些可以复用，而没有被使用的空间，看起来就像是“空洞”。</p><h3 id="删除数据会造成空洞-插入数据也会" tabindex="-1">删除数据会造成空洞，插入数据也会 <a class="header-anchor" href="#删除数据会造成空洞-插入数据也会" aria-label="Permalink to &quot;删除数据会造成空洞，插入数据也会&quot;">​</a></h3><p>如果数据是按照索引递增顺序插入的，那么索引是紧凑的。但如果数据是随机插入的，就可能造成索引的数据页分裂。</p><p><img src="'+t+'" alt="image"></p><ul><li>由于 page A 满了，再插入一个 ID 是 550 的数据时，就不得不再申请一个新的页面 page B 来保存数据了。页分裂完成后，page A 的末尾就留下了空洞</li><li>另外，更新索引上的值，可以理解为删除一个旧的值，再插入一个新值。不难理解，这也是会造成空洞的。</li><li>可通过重建表来将空洞去除，达到收缩表空间的目的</li></ul><h2 id="重建表" tabindex="-1">重建表 <a class="header-anchor" href="#重建表" aria-label="Permalink to &quot;重建表&quot;">​</a></h2><ul><li>为了将表A中存在的空洞去掉，可以新建一个与表 A 结构相同的表 B，然后按照主键 ID 递增的顺序，把数据一行一行地从表 A 里读出来再插入到表 B 中。</li><li>由于表 B 是新建的表，所以表 A 主键索引上的空洞，在表 B 中就都不存在了。</li><li>表 B 的主键索引更紧凑，数据页的利用率也更高。如果我们把表 B 作为临时表，数据从表 A 导入表 B 的操作完成后，<strong>用表 B 替换 A，从效果上看，就起到了收缩表 A 空间的作用</strong>。</li><li>可采用alter table A engine=InnoDB 命令来重建表。</li><li>MySQL 5.5 版本之前，MySQL 会自动完成转存数据、交换表名、删除旧表的操作。</li></ul><p>以下是改锁表DDL的流程 <img src="'+o+'" alt="image"></p><p>在整个DDL过程中，表A中不能有更新操作，即DDL不是Online的。</p><p><strong>MySQL 5.6 版本开始引入的 Online DDL，对这个操作流程做了优化。</strong></p><p>那么引入Online DDL的流程如下：</p><ol><li>建立一个临时文件，扫描表 A 主键的所有数据页；</li><li>用数据页中表 A 的记录生成 B+ 树，存储到临时文件中；</li><li>生成临时文件的过程中，将所有对 A 的操作记录在一个日志文件（row log）中，对应的是图中 state2 的状态；</li><li>临时文件生成后，将日志文件中的操作应用到临时文件，得到一个逻辑数据上与表 A 相同的数据文件，对应的就是图中 state3 的状态；</li><li>用临时文件替换表 A 的数据文件。</li></ol><p><img src="'+r+'" alt="image"></p><p>与之前的DDL相比，由于日志文件记录和重放操作这个功能的存在，这个方案在重建表的过程中，允许对表 A 做增删改操作。</p><p>关于表锁的问题：</p><ol><li>DDL之前要拿 MDL 写锁的，那么如何进行增删改操作呢？ alter 语句在启动的时候需要获取 MDL 写锁，但是<strong>这个写锁在真正拷贝数据之前就退化成读锁了</strong>。</li><li>为什么要退化呢？为了实现 Online，MDL 读锁不会阻塞增删改操作。</li><li>那为什么不干脆直接解锁呢？为了保护自己，禁止其他线程对这个表同时做 DDL。</li><li>为什么称为Online DDL? 对于一个大表来说，Online DDL 最耗时的过程就是拷贝数据到临时表的过程，这个步骤的执行期间可以接受增删改操作。所以，相对于整个 DDL 过程来说，锁的时间非常短。对业务来说，就可以认为是 Online 的。</li></ol><h2 id="online-和-inplace" tabindex="-1">Online 和 inplace <a class="header-anchor" href="#online-和-inplace" aria-label="Permalink to &quot;Online 和 inplace&quot;">​</a></h2><p>在重建表中，把表 A 中的数据导出来的存放位置叫作 tmp_table，是在server层创建的。</p><ul><li>根据表 A 重建出来的数据是放在“tmp_file”里的，这个临时文件是 InnoDB 在内部创建出来的。整个 DDL 过程都在 InnoDB 内部完成。</li><li>对于 server 层来说，没有把数据挪动到临时表，是一个“原地”操作，即 inplace</li></ul><p>那么，inplace和Online在重建表，拷贝到临时表中的逻辑是一样的。但是inplace会阻塞增删改操作，非Online。</p><p>两者之间的关系可概括为：</p><ul><li>DDL 过程如果是 Online 的，就一定是 inplace 的；</li><li>反过来未必，也就是说 inplace 的 DDL，有可能不是 Online 的。截止到 MySQL 8.0，添加全文索引（FULLTEXT index）和空间索引 (SPATIAL index) 就属于这种情况。</li></ul><p>optimize table、analyze table 和 alter table 这三种方式重建表的区别：</p><ul><li>从 MySQL 5.6 版本开始，alter table t engine = InnoDB（也就是 recreate）默认的就是上面图 4 的流程了；</li><li>analyze table t 其实不是重建表，只是<strong>对表的索引信息做重新统计，没有修改数据</strong>，这个过程中加了 MDL 读锁；</li><li>optimize table t 等于 recreate+analyze。</li></ul><h2 id="数据页的回收" tabindex="-1">数据页的回收 <a class="header-anchor" href="#数据页的回收" aria-label="Permalink to &quot;数据页的回收&quot;">​</a></h2><ul><li>数据页的回收是异步执行的，不会阻塞其他 DML 语句的执行。</li><li>数据页的回收是周期性执行的，并不是每次删除数据，都会触发数据页的回收。</li><li>数据页的回收是批量执行的，并不是每次删除数据，都会导致这个数据页被回收。</li></ul>',38),c=[s];function D(h,d,_,g,u,m){return e(),i("div",null,c)}const A=l(p,[["render",D]]);export{L as __pageData,A as default};
