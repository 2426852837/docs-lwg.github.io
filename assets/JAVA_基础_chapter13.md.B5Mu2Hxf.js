import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.C70_P7hw.js";const c=JSON.parse('{"title":"日志","description":"","frontmatter":{},"headers":[],"relativePath":"JAVA/基础/chapter13.md","filePath":"JAVA/基础/chapter13.md"}'),l={name:"JAVA/基础/chapter13.md"},e=n(`<h1 id="日志" tabindex="-1">日志 <a class="header-anchor" href="#日志" aria-label="Permalink to &quot;日志&quot;">​</a></h1><p>很多应用程序会使用其他日志框架，如 Log4J 2、Logback 等。</p><p>SLF4J 和 Commons Logging 等日志门面提供了一个统一的 API，利用这个 API 无须重写应用就可以替换日志框架。</p><p>另外在 java 9 以后，java 平台还有一个单独的轻量级日志系统，它不依赖于<code>java.logging</code>模块，这个系统只用于 java API。</p><h2 id="日志管理器" tabindex="-1">日志管理器 <a class="header-anchor" href="#日志管理器" aria-label="Permalink to &quot;日志管理器&quot;">​</a></h2><p>日志管理器负责配置日志记录，并将日志记录委托给适当的日志记录器。日志管理器实例通过<code>LogManager.getLogManager()</code>获取。</p><p>日志记录的配置包括各个日志记录器（包括根日志记录器）的级别、处理器、格式化器等，具体参见：<a href="https://docs.oracle.com/cd/E57471_01/bigData.100/data_processing_bdd/src/rdp_logging_config.html" target="_blank" rel="noreferrer">https://docs.oracle.com/cd/E57471_01/bigData.100/data_processing_bdd/src/rdp_logging_config.html</a></p><p>这些配置属性不是系统属性，因此不能调用<code>System.setProperty()</code>方法设置，可以通过以下两种方式来设置：1、日志管理器配置文件；2、程序代码中利用映射器<code>mapper</code>更新日志配置。</p><h3 id="利用配置文件设置日志系统" tabindex="-1">利用配置文件设置日志系统 <a class="header-anchor" href="#利用配置文件设置日志系统" aria-label="Permalink to &quot;利用配置文件设置日志系统&quot;">​</a></h3><p>日志管理器在虚拟机启动时（在<code>main</code>方法执行前）初始化，初始化时会读取日志管理器配置文件，默认的配置文件路径为<code>javaPackage\\conf\\logging.properties</code>。</p><p>配置文件中的属性设置是针对所有日志记录器的。例如有一个属性设置为<code>.level = INFO</code>，这是将所有日志记录器的级别设置为<code>INFO</code>。我们可以设置某个单独的日志记录器的属性，例如<code>Test.level = FINER</code>将日志记录器<code>Test</code>的级别单独设置为<code>FINER</code>。</p><p>如果想使用另一个配置文件，需要将系统属性<code>java.util.logging.config.file</code>设置为该文件的路径，有两种设置方式：</p><p>（1）可以在启动 java 虚拟机时通过命令行设置：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java.util.logging.config.file&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D:\\Code\\JavaTest\\x.txt&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Test2</span></span></code></pre></div><p><code>java</code>命令的选项<code>-D</code>用于设置系统属性。系统属性的键和值必须用双引号括起来，且键与<code>-D</code>之间不能有空格。</p><p>（2）也可以在程序中利用代码设置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java.util.logging.config.file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, file);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 重新初始化日志管理器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LogManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="利用映射器mapper更新日志配置" tabindex="-1">利用映射器<code>mapper</code>更新日志配置 <a class="header-anchor" href="#利用映射器mapper更新日志配置" aria-label="Permalink to &quot;利用映射器\`mapper\`更新日志配置&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 利用mapper更新日志配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">LogManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mapper);</span></span></code></pre></div><h2 id="日志记录器" tabindex="-1">日志记录器 <a class="header-anchor" href="#日志记录器" aria-label="Permalink to &quot;日志记录器&quot;">​</a></h2><p>1、日志记录器用于实际记录日志消息，并将日志记录发送给一个或多个日志处理器进行处理。</p><p>2、标准 java 日志框架中有一个根日志记录器（全局日志记录器），其名称为<code>&quot;&quot;</code>，它是所有日志记录器的祖先。</p><p>3、其他日志记录器需要手动创建。</p><p>4、日志记录器具有父子关系。但和 java 包不同，日志记录器的父与子之间具有语义关系，例如<code>com.mycompany.mylib</code>就是<code>com.mycompany</code>的子日志记录器。</p><p>5、日志记录器的父与子之间将共享属性。例如，如果对日志记录器<code>com.mycompany</code>设置了日志级别，它的子日志记录器也会继承这个级别。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.lang.logging;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取根日志记录器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Logger logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGlobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建或获取自定义的日志记录器（未被任何变量引用的日志记录器可能会被垃圾回收，因此用静态变量存储日志记录器的引用）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger myLogger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.mycompany.myapp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HTTP.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 记录一条普通日志（方式1）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 记录一条普通日志（方式2）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.WARNING, message);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 记录一条日志：方法调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 默认的日志记录将显示根据调用堆栈得出的包含日志调用的类名和方法名，但如果虚拟机对执行过程进行了优化，就得不到准确的调用信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.WARNING, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 记录一条日志：抛出的异常（方式1）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">throwing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 记录一条日志：抛出的异常（方式2）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.ALL, e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 记录一条日志：执行流（进入方法）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entering</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;read&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]{file, pattern});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 记录一条日志：执行流（退出方法）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exiting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;read&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="日志处理器" tabindex="-1">日志处理器 <a class="header-anchor" href="#日志处理器" aria-label="Permalink to &quot;日志处理器&quot;">​</a></h2><p>1、日志处理器负责将日志记录输出到不同的目标位置，比如控制台、文件、数据库、远程服务器等。</p><p>2、java 标准库提供了一些内置的日志处理器，如：<code>ConsoleHandler</code>（将日志记录打印到控制台窗口）、<code>FileHandler</code>（将日志记录写入文件）、<code>StreamHandler</code>（将日志记录写入流中）、<code>SocketHandler</code>（将日志记录发送到指定的主机和端口）等，同时也允许用户创建自定义的处理器来满足特定需求。</p><p>3、一个日志记录器可以有 0 个、1 个或多个处理器（<code>handler</code>私有属性表示）。</p><p>4、根日志记录器的处理器默认是<code>ConsoleHandler</code>，我们手动创建的日志记录器的处理器默认为<code>null</code>。可以显式地设置日志记录器的处理器。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var handler  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConsoleHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.FINE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUseParentHandlers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>5、日志记录器的<code>useParentHandlers</code>属性默认为<code>true</code>，即默认会使用父处理器（父日志记录器的处理器）。</p><p>6、当我们用某个日志记录器记录一条日志时，步骤如下：</p><p>（1）如果日志级别高于等于日志记录器的级别，那么接受这条日志记录；否则舍弃，即结束执行。</p><p>（2）如果日志符合过滤器（日志记录器的过滤器）的过滤规则，那么接受这条日志记录；否则舍弃，即结束执行。</p><p>（3）日志记录器将日志传送给自己所有的处理器：如果它的<code>handler</code>属性不为<code>null</code>，则传送；否则不会传送，但继续执行。</p><p>（4）如果日志记录器的<code>useParentHandlers</code>属性设置为<code>true</code>，则将日志传送给父处理器；否则不会传送，即结束执行。</p><p>（5）如果父日志记录器的<code>useParentHandlers</code>属性也设置为<code>true</code>，则将这条日志记录传送给更上层的父处理器；否则不会传送，即结束执行。</p><p>（6）依次类推，最终可能会到达根日志记录器，然后传送给它的处理器（默认为<code>ConsoleHandler</code>），然后由处理器输出（默认为标准错误流<code>System.err</code>，即控制台窗口）。</p><p>因此，一条日志记录可能会被多个处理器重复打印多次，这是正常且合理的。</p><h3 id="文件处理器filehandler" tabindex="-1">文件处理器<code>FileHandler</code> <a class="header-anchor" href="#文件处理器filehandler" aria-label="Permalink to &quot;文件处理器\`FileHandler\`&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认为用户主目录下的javan.log文件，n是保证文件唯一的一个编号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果用户没有主目录的概念，文件就存储在一个默认位置下（例如C:\\Windows）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler);</span></span></code></pre></div><p>默认情况下，记录会被格式化为 XML。例如，一个典型的日志记录形式如下：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2002-02-04T07:45:15&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">millis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1012837515710&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">millis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.mycompany.myapp&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;INFO&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.company.mylib.Reader&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;read&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;10&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Reading file corejava.gif&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="文件处理器属性" tabindex="-1">文件处理器属性 <a class="header-anchor" href="#文件处理器属性" aria-label="Permalink to &quot;文件处理器属性&quot;">​</a></h4><p>文件管理器属性如下表所示。</p><p>1、文件名模式（<code>java.util.logging.FileHandler.pattern</code>），其含义如下表所示：</p><p>2、如果多个应用程序（或者同一个应用程序的多个副本）使用同一个日志文件，就应该：</p><p>（1）开启<code>append</code>标志，即设置<code>java.util.logging.FileHandler.append = true</code>。</p><p>（2）文件名模式使用<code>%u</code>，以便每个应用程序创建日志的唯一副本。不过默认就是<code>%h/java%u.log</code>，不用更改。</p><p>3、开启文件循环功能：例如设置<code>java.util.logging.FileHandler.count = 3</code>，那么日志文件将以循环序列的形式保存，如<code>myapp.log.0</code>、<code>myapp.log.1</code>、<code>myapp.log.2</code>等。只要文件超出了大小限制，最老的文件就会被删除，其他的文件将重新命名，同时创建一个新文件，其生成号为<code>0</code>。</p><h3 id="流处理器streamhandler" tabindex="-1">流处理器<code>StreamHandler</code> <a class="header-anchor" href="#流处理器streamhandler" aria-label="Permalink to &quot;流处理器\`StreamHandler\`&quot;">​</a></h3><p>可以通过扩展<code>Handler</code>类或<code>StreamHandler</code>类自定义处理器。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WindowHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StreamHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WindowHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JTextArea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b, off, len));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LogRecord </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(record);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        flush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个处理器扩展了<code>StreamHandler</code>类，并安装了一个流。这个流的<code>write</code>方法将流输出显示到一个文本区中。</p><p>使用这种方式只存在一个问题，就是处理器会缓存记录，并且只有当缓冲区满的时候才将它们写入流中。因此，==需要覆盖<code>publish</code>方法==，以便在处理器获得每个记录之后立马就刷新<em>输出缓冲区</em>。</p><p>如果希望编写更加复杂的处理器，就应该扩展<code>Handler</code>类，并定义<code>publish</code>、<code>flush</code>和<code>close</code>方法。</p><h3 id="格式化器" tabindex="-1">格式化器 <a class="header-anchor" href="#格式化器" aria-label="Permalink to &quot;格式化器&quot;">​</a></h3><p><code>ConsoleHandler</code>类和<code>FileHandler</code>类可以生成文本和 XML 格式的日志记录。</p><p>1、也可以自定义格式，这需要扩展<code>Formatter</code>类并覆盖下面这个方法：<code>String format(LogRecord record)</code>。可以根据自己的需要以任何方式对记录中的信息进行格式化，并返回结果字符串。</p><p>2、在<code>format</code>方法中，可能会调用下面这个方法：<code>String formatMessage(LogRecord record)</code>。这个方法对记录中的消息部分进行格式化，将替换参数并应用本地化处理。</p><p>3、很多文件格式（如 XML）需要在已格式化的记录的前后加上一个头部和尾部。为此，需要覆盖下面两个方法：<code>String getHead(Handler h)</code>和<code>String getTail(Handler h)</code>。</p><p>4、最后，调用<code>setFormatter</code>方法将格式化器安装到处理器中。</p><h2 id="日志过滤器" tabindex="-1">日志过滤器 <a class="header-anchor" href="#日志过滤器" aria-label="Permalink to &quot;日志过滤器&quot;">​</a></h2><p>默认情况下，会根据日志记录的级别进行过滤。除此之外，==每个日志记录器和处理器都有一个可选的过滤器来完成附加的过滤==。</p><p>1、要定义一个过滤器，首先需要实现<code>Filter</code>接口并定义以下方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isLoggable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LogRecord record);</span></span></code></pre></div><p>在这个方法中，可以自定义规则，对那些应该包含在日志中的记录返回<code>true</code>。</p><p>2、然后，调用<code>setFilter</code>方法将过滤器安装到日志记录器或处理器中。日志记录器和处理器上都可以安装过滤器。</p><h2 id="日志级别" tabindex="-1">日志级别 <a class="header-anchor" href="#日志级别" aria-label="Permalink to &quot;日志级别&quot;">​</a></h2><p>1、日志级别用于指示日志消息的重要性或严重程度。java 有七个日志级别，按照严重程度依次为：</p><p>（1）SEVERE（严重错误）；（2）WARNING（警告）；（3）INFO（信息性消息）；（4）CONFIG（配置信息）；（5）FINE（调试信息）；（6）FINER（调试信息）；（7）FINES（调试信息）。</p><p>2、日志记录器默认的级别是 INFO，也就是只有 SEVERE、WARNING、INFO 这三个级别的日志会被传送给处理器，其他级别的日志会被忽略。日志记录器的级别可以通过<code>logger.getLevel()</code>获得，通过<code>logger.setLevel(Level l)</code>设置。这种设置只会影响指定的日志记录器，不会影响其他日志记录器。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置日志记录器logger的级别为FINE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.FINE);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开启日志记录器logger所有级别的记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.ALL);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 关闭日志记录器logger所有级别的记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLevel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.OFF);</span></span></code></pre></div><p>3、日志处理器默认的级别也是 INFO，也就是只有 SEVERE、WARNING、INFO 这三个级别的日志会被处理器输出，其他级别的日志会被忽略。日志处理器的级别可以通过<code>handler.getLevel()</code>获得，通过<code>handler.setLevel(Level l)</code>设置。这种设置只会影响指定的日志处理器，不会影响其他日志处理器。</p><p>因此，==某一条日志记录要想被记录到目标位置（控制台窗口、文件、远程服务器、数据库等），它的级别必须满足：（1）高于等于日志记录器的级别；（2）且高于日志处理器的级别。==</p><h2 id="调试技巧" tabindex="-1">调试技巧 <a class="header-anchor" href="#调试技巧" aria-label="Permalink to &quot;调试技巧&quot;">​</a></h2><p>1、==<code>main</code>方法==</p><p>可以在每个类中放置一个单独的<code>main</code>方法。这样就可以提供一个单元测试桩（stub）,能够独立测试类。</p><p>更进一步，可以使用一个非常流行的单元测试框架 JUnit（<a href="http://junit.org" target="_blank" rel="noreferrer">http://junit.org</a>）。利用它可以很容易地组织测试用例套件。只要对类做了修改，就需要运行测试。一旦发现bug，还要再补充另一个测试用例。</p><p>2、==日志代理==</p><p>日志代理对象是一个超类的子类对象，它可以截获方法调用，记录日志，然后调用超类的方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 日志代理对象rand是Random子类的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rand </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGlobal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nextDouble: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rand.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>3、==获得堆栈轨迹==</p><p>（1）利用<code>Throwable</code>类的<code>printStackTrace</code>方法，可以从任意的异常对象获得堆栈轨迹。</p><p>（2）也可以使用代码<code>Thread.dumpStack();</code>获得任意的堆栈轨迹。</p><p>4、==重定向标准错误流==</p><p>程序错误默认会发送到<code>System.err</code>，如果要将程序错误记入一个文件，应当使用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重定向标准错误流，不要使用javac MyProgram &gt; errors.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyProgram</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> errors.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在同一个文件中同时捕获System.err和System.out</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyProgram</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 1&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> errors.txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 2&gt;&amp;1</span></span></code></pre></div><p>5、==改变未捕获异常的处理器==</p><p>有些未捕获异常的堆栈轨迹也可能输出到标准错误流<code>System.err</code>中。更好的方法是将这些消息记录到一个文件中。可以用静态方法<code>Thread.setDeafaultUncaughtExceptionHandler</code>改变未捕获异常的处理器。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDefaultUncaughtExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UncaughtExceptionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uncaughtException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Thread t, Throwable e){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>6、==观察类的加载过程==</p><p>启动 java 虚拟机时可以使用<code>-verbose</code>标志。这种方法对诊断类路径会很有帮助。</p><p>7、<code>javac -Xlint</code>选项</p><p>启动 javac 编译器时，<code>-Xlint</code>选项告诉编译器找出常见的问题代码，这可以找出代码中有问题但不违背语法规则的构造。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xlint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MyProgram.java</span></span></code></pre></div><p>8、==jconsole 图形工具==</p><p>==java 虚拟机增加了对 java 应用程序的监控和管理支持，允许在虚拟机中安装代理来跟踪内存消耗、线程使用、类加载等情况。这些特性对于规模很大而且长时间运行的 java 程序（如应用服务器）尤其重要。==</p><p>作为展示这些功能的一个例子，jdk 提供了一个名为 jconsole（www.oracle.com/technetwork/articles/java/jconsole-1564139.html）的图形工具，可以显示有关虚拟机性能的统计结果。</p><p>启动你的 java 程序，然后启动 jconsole，可以从正在运行的 java 程序列表中选择你的程序。控制台会给出有关运行程序的大量信息。</p><p>9、==java 任务控制器==</p><p>java 任务控制器（Java Mission Control）是一个专业级性能分析和诊断工具，包含在 oracle jdk 中，可以免费用于开发。</p><p>如果在生产环境中使用则需要有商业授权。目前 OpenJDK 中提供了一个开源版本。</p><p>与 jconsole 类似，Java 任务控制器可以关联到正在运行的 java 虚拟机。</p><p>Java 任务控制器还能分析 java 飞行记录器（Java Flight Recorder）的输出。java 飞行记录器可以从一个正在运行的 java 应用程序收集诊断和性能分析数据。</p><p>有关这些工具的更多信息参见 <a href="https://docs.oracle.com/javacomponents/index.html" target="_blank" rel="noreferrer">https://docs.oracle.com/javacomponents/index.html</a> 。</p>`,108),h=[e];function p(t,k,d,r,E,g){return a(),i("div",null,h)}const y=s(l,[["render",p]]);export{c as __pageData,y as default};
